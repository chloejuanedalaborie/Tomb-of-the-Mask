import pyxel

# Paramètres du labyrinthe
TAILLE_CASE = 4
GRILLE_LARGEUR = 40
GRILLE_HAUTEUR = 30

pyxel.init(GRILLE_LARGEUR * TAILLE_CASE, GRILLE_HAUTEUR * TAILLE_CASE, title="Déplacement auto intelligent", fps=60)

# 0 = vide, 1 = mur
labyrinthe = [
    [1]*40,
    [1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1],
    [1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,0,1],
    [1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1]*40,
]

# Complétons la hauteur manquante
while len(labyrinthe) < GRILLE_HAUTEUR:
    labyrinthe.append([1]*GRILLE_LARGEUR)

# Position et direction initiales
snake = {
    "x": 1 * TAILLE_CASE,
    "y": 1 * TAILLE_CASE,
    "dx": 0,
    "dy": 0,
    "couleur": 10
}

def est_case_libre(x, y):
    # Vérifie que les 4 coins du carré sont dans des cases libres
    positions = [
        (x, y),
        (x + TAILLE_CASE - 1, y),
        (x, y + TAILLE_CASE - 1),
        (x + TAILLE_CASE - 1, y + TAILLE_CASE - 1)
    ]
    for px, py in positions:
        gx = px // TAILLE_CASE
        gy = py // TAILLE_CASE
        if not (0 <= gx < GRILLE_LARGEUR and 0 <= gy < GRILLE_HAUTEUR):
            return False
        if labyrinthe[gy][gx] != 0:
            return False
    return True


def est_intersection(x, y):
    gx = x // TAILLE_CASE
    gy = y // TAILLE_CASE
    directions_libres = 0
    for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
        nx = gx + dx
        ny = gy + dy
        if 0 <= nx < GRILLE_LARGEUR and 0 <= ny < GRILLE_HAUTEUR:
            if labyrinthe[ny][nx] == 0:
                directions_libres += 1
    return directions_libres >= 3  # Plus de 2 choix possibles

def aligné_sur_grille(x, y):
    return x % TAILLE_CASE == 0 and y % TAILLE_CASE == 0

def update():
    global snake

    if aligné_sur_grille(snake["x"], snake["y"]):
        # Si le joueur est aligné sur la grille, on vérifie les touches
        if snake["dx"] == 0 and snake["dy"] == 0:
            # Le joueur est arrêté, on attend une direction
            if pyxel.btnp(pyxel.KEY_RIGHT):
                if est_case_libre(snake["x"] + TAILLE_CASE, snake["y"]):
                    snake["dx"], snake["dy"] = TAILLE_CASE // 4, 0
            elif pyxel.btnp(pyxel.KEY_LEFT):
                if est_case_libre(snake["x"] - TAILLE_CASE, snake["y"]):
                    snake["dx"], snake["dy"] = -TAILLE_CASE // 4, 0
            elif pyxel.btnp(pyxel.KEY_DOWN):
                if est_case_libre(snake["x"], snake["y"] + TAILLE_CASE):
                    snake["dx"], snake["dy"] = 0, TAILLE_CASE // 4
            elif pyxel.btnp(pyxel.KEY_UP):
                if est_case_libre(snake["x"], snake["y"] - TAILLE_CASE):
                    snake["dx"], snake["dy"] = 0, -TAILLE_CASE // 4
        else:
            # Il avance, mais on vérifie s'il faut s'arrêter
            next_x = snake["x"] + snake["dx"]
            next_y = snake["y"] + snake["dy"]
            if not est_case_libre(next_x, next_y) or est_intersection(snake["x"], snake["y"]):
                snake["dx"], snake["dy"] = 0, 0

    # Déplacement si possible
    # Prochaine position
    next_x = snake["x"] + snake["dx"]
    next_y = snake["y"] + snake["dy"]

    if est_case_libre(next_x, next_y):
        snake["x"] = next_x
        snake["y"] = next_y
    else:
        snake["dx"], snake["dy"] = 0, 0


def draw():
    pyxel.cls(0)

    # Affichage du labyrinthe
    for y in range(GRILLE_HAUTEUR):
        for x in range(GRILLE_LARGEUR):
            if labyrinthe[y][x] == 1:
                pyxel.rect(x * TAILLE_CASE, y * TAILLE_CASE, TAILLE_CASE, TAILLE_CASE, 5)

    # Affichage du carré
    pyxel.rect(snake["x"], snake["y"], TAILLE_CASE, TAILLE_CASE, snake["couleur"])

pyxel.run(update, draw)

